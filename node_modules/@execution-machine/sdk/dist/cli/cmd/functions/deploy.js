"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.functionDeployCmd = void 0;
const fs_1 = require("fs");
const util_1 = require("util");
const model_1 = require("../../../common/model");
const em_wrapper_1 = require("../em-wrapper");
const Arweave = require('arweave');
const Confirm = require('prompt-confirm');
const Encoder = new util_1.TextEncoder();
const Decoder = new util_1.TextDecoder();
const initContract = async (initState, contractTxId, wallet, arweave) => {
    const tx = await arweave.createTransaction({
        data: Encoder.encode(initState),
    });
    tx.addTag("Contract-Src", contractTxId);
    await arweave.transactions.sign(tx, wallet);
    return [tx, {
            id: tx.id,
            tags: tx.tags.map(({ name, value }) => ({
                name: atob(name),
                value: atob(value),
            })),
            data: Decoder.decode(tx.data),
        }];
};
const error = (message) => {
    console.error(message);
    process.exit(1);
};
const successfulDeployment = (sourceTxId, initTxId) => {
    console.log("Contract deployed ðŸŽ‰\n");
    console.log("Contract Source:", "https://arweave.net/tx/" + sourceTxId);
    console.log("Smart Contract:", "https://arweave.net/tx/" + initTxId);
    console.log(`\nUse Smart Contract Id ${initTxId} as your interaction reference.`);
};
const figureOutContractType = (input, byType) => {
    let contentType = model_1.ContractType.JS;
    const lowerCaseInput = input.toLowerCase();
    if (byType) {
        switch (lowerCaseInput) {
            case "wasm":
                contentType = model_1.ContractType.WASM;
                break;
            case "evm":
                contentType = model_1.ContractType.EVM;
                break;
            case "js":
                contentType = model_1.ContractType.JS;
                break;
        }
    }
    else {
        if (lowerCaseInput.endsWith(".js")) {
            contentType = model_1.ContractType.JS;
        }
        else if (lowerCaseInput.endsWith(".wasm")) {
            contentType = model_1.ContractType.WASM;
        }
        else {
            contentType = model_1.ContractType.JS;
        }
    }
    return contentType;
};
const functionDeployCmd = async (opts) => {
    let contentType = figureOutContractType(opts.type || opts.src, opts.type !== undefined);
    let initState;
    if (opts.initState) {
        initState = opts.initState;
    }
    else if (opts.initStateSrc) {
        initState = (0, fs_1.readFileSync)(opts.initStateSrc, 'utf8');
    }
    else {
        error(`Deployment requires --init-state or --init-state-src to be passed`);
    }
    if (opts.useArweave === true) {
        const arweave = Arweave.init({
            host: "arweave.net",
            port: 443,
            protocol: "https",
        });
        if (!opts.wallet) {
            error('--wallet (Wallet Path) is required for deployments');
        }
        const wallet = JSON.parse((0, fs_1.readFileSync)(opts.wallet, 'utf8'));
        const address = await arweave.wallets.jwkToAddress(wallet);
        console.log("Deploying function using wallet", address);
        if (opts.contractTx) {
            console.log("Deploying contract using source transaction", opts.contractTx);
            const initDeploymentTx = await initContract(initState, opts.contractTx, wallet, arweave);
            console.log("\nInit Contract:", initDeploymentTx[1]);
            const doDeploy = await new Confirm('Do you want to deploy this function?').run();
            if (doDeploy) {
                const res = await arweave.transactions.post(initDeploymentTx[0]);
                if (res.status >= 400) {
                    error(`Failed to deploy init contract. Source Contract ID: ${opts.contractTx}`);
                }
                successfulDeployment(opts.contractTx, initDeploymentTx[1].id);
            }
            else {
                console.log("\nDeployment cancelled");
            }
        }
        else if (opts.src) {
            const txSource = await arweave.createTransaction({
                data: (0, fs_1.readFileSync)(opts.src),
            });
            txSource.addTag("Content-Type", contentType);
            txSource.addTag("App-Name", "EM");
            txSource.addTag("Type", "Serverless-Function");
            await arweave.transactions.sign(txSource, wallet);
            const txInit = await initContract(initState, txSource.id, wallet, arweave);
            console.log(`\nSource Contract:`, {
                id: txSource.id,
                tags: txSource.tags.map(({ name, value }) => ({
                    name: atob(name),
                    value: atob(value),
                }))
            });
            console.log(`\nInit Contract`, txInit[1]);
            const confirmation = await new Confirm('Do you want to deploy this function?').run();
            if (confirmation) {
                const txSourceDeployment = await arweave.transactions.post(txSource);
                if (txSourceDeployment.status >= 400) {
                    error(`Failed to deploy source contract.`);
                }
                else {
                    const initContractDeployment = await arweave.transactions.post(txInit[0]);
                    if (initContractDeployment.status >= 400) {
                        error(`Failed to init contract. Source Contract ID: ${txSource.id}`);
                    }
                }
                successfulDeployment(txSource.id, txInit[1].id);
            }
            else {
                console.log("\nDeployment cancelled");
            }
        }
        else {
            error(`Deployment requires --contract-tx or --src`);
        }
    }
    else {
        let contractData;
        if (!opts.token) {
            error('EXM Token (--token) is required to deploy contracts through EXM');
        }
        if (opts.contractTx) {
            const fetchContractSourceTx = await fetch(`https://arweave.net/${opts.contractTx}`);
            if (fetchContractSourceTx.ok) {
                contractData = new Uint8Array(await fetchContractSourceTx.arrayBuffer());
            }
            else {
                console.error(`Source contract transaction ${opts.contractTx} is invalid or does not exist.`);
            }
        }
        else if (opts.src) {
            contractData = await (0, fs_1.readFileSync)(opts.src);
        }
        else {
            error(`Deployment requires --contract-tx or --src`);
        }
        const confirmation = await new Confirm(`Do you want to deploy this function?`).run();
        if (confirmation) {
            if (opts.token) {
                em_wrapper_1.em.changeToken(opts.token);
            }
            const beginDeployment = await em_wrapper_1.em.functions.deploy(contractData, initState, contentType);
            console.log(`Contract deployed ðŸŽ‰\n`);
            console.log(`EXM Contract: https://arweave.net/${beginDeployment.id}`);
        }
    }
};
exports.functionDeployCmd = functionDeployCmd;
//# sourceMappingURL=deploy.js.map